import logging


logger = logging.getLogger(__name__)


class Event(object):
    """
    A superclass for any events that might be generated by an
    object and sent to the EventManager.
    """

    def __init__(self):
        self.name = "Generic event"

    def __str__(self):
        return self.name


class QuitEvent(Event):
    """
    Quit event.
    """

    def __init__(self):
        self.name = "Quit event"


class TickEvent(Event):
    """
    Tick event.
    """

    def __init__(self):
        self.name = "Tick event"


class MouseEvent(Event):
    """
    A mouse input event.
    """

    def __init__(self, button: int, click_pos: tuple):
        self.name = "Mouse Input Event"
        self.button = button
        self.click_pos = click_pos

    def __str__(self):
        return f"{self.name}: clickpos={self.click_pos}, button={self.button}"
    
    
class CastEvent(Event):
    """
    A spell cast event.
    """
    
    def __init__(self):
        self.name = "Cast Event"

    def __str__(self):
        return f"{self.name}"
    
    
class PaletteSelectEvent(Event):
    """
    A palette item select event.
    """

    def __init__(self, palette_item: int):
        self.name = "Palette Item Select Event"
        self.item = palette_item

    def __str__(self):
        return f'{self.name} (key={self.item})'


class InitializeEvent(Event):
    """
    Tells all listeners to initialize themselves.
    This includes loading libraries and resources.

    Avoid initializing such things within listener __init__ calls 
    to minimize snafus (if some rely on others being yet created.)
    """

    def __init__(self):
        self.name = "Initialize event"


class StateChangeEvent(Event):
    """
    Change the model state machine.
    Given a None state will pop() instead of push.
    """

    def __init__(self, state):
        self.name = "State change event"
        self.state = state

    def __str__(self):
        if self.state:
            return '%s pushed %s' % (self.name, self.state)
        else:
            return '%s popped' % (self.name, )


class EventManager(object):
    """
    We coordinate communication between the Model, View, and Controller.
    """

    def __init__(self):
        from weakref import WeakKeyDictionary
        self.listeners = WeakKeyDictionary()

    def register_listener(self, listener):
        """ 
        Adds a listener to our spam list. 
        It will receive Post()ed events through it's notify(event) call. 
        """

        self.listeners[listener] = 1

    def unregister_listener(self, listener):
        """ 
        Remove a listener from our spam list.
        This is implemented but hardly used.
        Our weak ref spam list will auto remove any listeners who stop existing.
        """

        if listener in self.listeners.keys():
            del self.listeners[listener]

    def post(self, event):
        """
        Post a new event to the message queue.
        It will be broadcast to all listeners.
        """

        if not isinstance(event, TickEvent):
            # print the event (unless it is TickEvent)
            logger.debug(f"Posting event: {event}")
        for listener in self.listeners.keys():
            listener.notify(event)
